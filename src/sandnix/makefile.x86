AS = as
CC = gcc
LINKER = ld
ASFLAGS = --32
CCFLAGS = -fno-zero-initialized-in-bss -Wall -Werror-implicit-function-declaration -Wunused-parameter  -std=c99 -m32 -nostdlib -fno-builtin -DX86 -DVERSION=0x0000000001 -g
LDFLAGS = -m elf_i386 --gc-sections -Ttext 0xC0100100 -e _start

current_path = $(shell pwd)

root_path = $(current_path)/../..

TARGET_DIR = $(root_path)/bin/sandnix/x86
TARGET = $(TARGET_DIR)/sandnix
MAP = $(TARGET_DIR)/sandnix.map

SOURCES += setup/arch/x86/setup.s \
			setup/arch/x86/start_paging.c \
			io/io.c \
			io/arch/x86/int.c \
			io/arch/x86/ports.c \
			io/arch/x86/int_handler.s \
			io/arch/x86/int_dispatcher.c \
			exceptions/arch/x86/exceptions.c \
			debug/arch/x86/debug.c \
			pm/arch/x86/schedule.c \
			pm/arch/x86/process.c \
			pm/spinlock/arch/x86/spinlock.c \
			mm/paging/arch/x86/physical_mem.c \
			mm/paging/arch/x86/paging.c \
			rtl/string/arch/x86/string.c \
			rtl/math/arch/x86/math.c \
			vfs/vfs.c
			

OBJS_DIR = $(root_path)/obj/sandnix/x86

OBJS = $(foreach filename,\
		$(SOURCES),\
		$(OBJS_DIR)/$(basename $(filename)).o)
		
.PHONY : all clean delete rebuild

all : $(TARGET)

$(TARGET) : $(OBJS) $(TARGET_DIR)
	$(LINKER) $(LDFLAGS) -o $(TARGET) $(OBJS) -Map $(MAP)

$(OBJS) : $(SOURCES) $(OBJS_DIR)
	$(foreach filename,$(SOURCES),\
		$(if $(filter .c,$(suffix $(filename))),\
			$(shell \
			$(CC) $(CCFLAGS) -c -o $(OBJS_DIR)/$(basename $(filename)).o $(current_path)/$(filename))\
		)\
		$(if $(filter .s,$(suffix $(filename))),\
			$(shell \
			$(AS) $(ASFLAGS) -o $(OBJS_DIR)/$(basename $(filename)).o $(current_path)/$(filename))\
		)\
		$(if $(filter .S,$(suffix $(filename))),\
			$(shell \
			$(AS) $(ASFLAGS) -o $(OBJS_DIR)/$(basename $(filename)).o $(current_path)/$(filename))\
		)\
	)
$(TARGET_DIR) :
	mkdir -p $(TARGET_DIR)
	
$(OBJS_DIR) :
	$(foreach filename,\
		$(OBJS),\
		$(shell mkdir -p $(dir $(filename))))

clean :
	-rm -r $(OBJS_DIR)
	
delete :
	-rm -r $(OBJS_DIR)
	-rm -r $(TARGET_DIR)
	
rebuild : delete all

